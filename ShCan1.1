#include <Ultrasonic.h>

#define X_STEP_PIN         54
#define X_DIR_PIN          55
#define X_ENABLE_PIN       38
#define X_MIN_PIN           3
#define X_MAX_PIN           2

#define Y_STEP_PIN         60
#define Y_DIR_PIN          61
#define Y_ENABLE_PIN       56
#define Y_MIN_PIN          14
#define Y_MAX_PIN          15

#define trigPinX 33
#define echoPinX 37

#define trigPinY 39
#define echoPinY 50

Ultrasonic eyeX(trigPinX, echoPinX);
Ultrasonic eyeY(trigPinY, echoPinY);

const int SWITCH = 39;
const int LED = 45;
//const int stepsPerRev = 200;
bool state = 0; //whether device is on/off
int measurements[350][2];
int arrLength = 350;
int moveTime = 2000;  //(ms)
int totTime = moveTime*2;  //time for motors to come back to original position
int currentMillis = 0;
int count = 0;  //number of times through the loop

void setup(){
  Serial.begin(9600);
  pinMode(SWITCH, INPUT);
  pinMode(X_STEP_PIN  , OUTPUT);
  pinMode(X_DIR_PIN    , OUTPUT);
  pinMode(X_ENABLE_PIN    , OUTPUT);
  pinMode(Y_STEP_PIN  , OUTPUT);
  pinMode(Y_DIR_PIN    , OUTPUT);
  pinMode(Y_ENABLE_PIN    , OUTPUT);
}

void translate(){
  while (millis()  < moveTime) {
    int count = 100;
    if(millis()==count*10){
      measurements[count-100][0] = eyeX.distanceRead(); 
      measurements[count-100][1] = eyeY.distanceRead();
      count++;      
    }
    digitalWrite(X_DIR_PIN    , HIGH);
    digitalWrite(Y_DIR_PIN    , HIGH);
    digitalWrite(X_STEP_PIN    , HIGH);
    digitalWrite(Y_STEP_PIN    , HIGH);
    delayMicroseconds(1000);
  
    digitalWrite(X_STEP_PIN    , LOW);
    digitalWrite(Y_STEP_PIN    , LOW);
  }
    digitalWrite(X_DIR_PIN    , LOW);
    digitalWrite(Y_DIR_PIN    , LOW);
    digitalWrite(X_STEP_PIN    , HIGH);
    digitalWrite(Y_STEP_PIN    , HIGH);
    delayMicroseconds(1000);
  
    digitalWrite(X_STEP_PIN    , LOW);
    digitalWrite(Y_STEP_PIN    , LOW);
}

void stopMotors(){
  digitalWrite(X_ENABLE_PIN, HIGH);
  digitalWrite(Y_ENABLE_PIN, HIGH);
}

/*void writeData(){
  while(millis()<=3000){
    int count = 1;
    if(millis()==count*10){  //multiplier decides number of milliseconds per measurement
      measurements[count-1][0] = analogRead(eyeX); 
      measurements[count-1][1] = analogRead(eyeY);
      count++;
    }    
  }*/
/*  while(millis()-currentMillis<=3000){  //checks if we're still in the measuring interval's time frame
    int count = 1;
    if(millis()-currentMillis==count*10){  //multiplier decides number of milliseconds per measurement
      measurements[count-1][0] = analogRead(eyeX); 
      measurements[count-1][1] = analogRead(eyeY);
      count++;
    }    
  }
}*/

void printData(){  //use for debugging and/or analyzing data
  for(int i=0; i<2; i++){
    for(int j=0; j<350; j++){
      Serial.print(measurements[j][i]);
      Serial.print(" ");
    }
    Serial.println();
  }  
}


void loop(){
/*  if(millis()-currentMillis>=6000){
    currentMillis = millis(); //update currentMillis after each interval
  }*/
  digitalWrite(LED, HIGH);
  translate();
  if(millis()>6000){
    digitalWrite(LED, LOW);
    stopMotors();
    printData();
    while(true);
  }
  
  /*
  state = digitalRead(SWITCH); //updates switch value each loop
  digitalWrite(LED, LOW);
  if(state){
    Serial.println("1");
    digitalWrite(LED, HIGH); 
      translate();
 //   writeData();
 //   printData();
    count++;
    while(state>0){
      Serial.println("2");
      state = digitalRead(SWITCH);
    }
  }*/
}
